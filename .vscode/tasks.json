{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run System Validation",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && python test_system.py"
		},
		{
			"label": "Final System Validation",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && python test_system.py"
		},
		{
			"label": "Make run.sh executable",
			"type": "shell",
			"command": "chmod +x /home/kevin/Projects/tumor-detection-segmentation/run.sh"
		},
		{
			"label": "Make test_docker.sh executable",
			"type": "shell",
			"command": "chmod +x /home/kevin/Projects/tumor-detection-segmentation/test_docker.sh"
		},
		{
			"label": "Test Docker Configuration",
			"type": "shell",
			"command": "./test_docker.sh"
		},
		{
			"label": "Final Docker Validation",
			"type": "shell",
			"command": "python validate_docker.py"
		},
		{
			"label": "Final validation to confirm README accuracy",
			"type": "shell",
			"command": "python validate_docker.py"
		},
		{
			"label": "MONAI Verification Checklist",
			"type": "shell",
			"command": "python verify_monai_checklist.py",
			"group": "test"
		},
		{
			"label": "Install Package Dependencies",
			"type": "shell",
			"command": "pip install -e .",
			"group": "build"
		},
		{
			"label": "Create Virtual Environment",
			"type": "shell",
			"command": "python3 -m venv venv && source venv/bin/activate && pip install --upgrade pip",
			"group": "setup"
		},
		{
			"label": "Install Requirements",
			"type": "shell",
			"command": "source venv/bin/activate && pip install -r requirements.txt",
			"group": "setup"
		},
		{
			"label": "MONAI Verification (VEnv)",
			"type": "shell",
			"command": "chmod +x verify_monai_venv.sh && ./verify_monai_venv.sh",
			"group": "test"
		},
		{
			"label": "Detect Graphics Hardware",
			"type": "shell",
			"command": "lspci | grep -i vga && echo '=== AMD/ATI cards ===' && lspci | grep -i amd && echo '=== ROCm info ===' && rocm-smi || echo 'ROCm not available' && echo '=== HIP runtime ===' && hipconfig || echo 'HIP not available'",
			"group": "detect"
		},
		{
			"label": "Install Project Editable",
			"type": "shell",
			"command": "source venv/bin/activate && pip install -e .",
			"group": "build"
		},
		{
			"label": "Run MONAI Verification Checklist",
			"type": "shell",
			"command": "source venv/bin/activate && python verify_monai_checklist.py",
			"group": "test"
		},
		{
			"label": "MONAI Verification Checklist",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py",
			"group": "test"
		},
		{
			"label": "Replace transform tests file",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm tests/unit/test_transforms_presets.py && mv tests/unit/test_transforms_presets_fixed.py tests/unit/test_transforms_presets.py",
			"group": "build"
		},
		{
			"label": "Replace MONAI loader file and run verification",
			"type": "shell",
			"command": "mv src/data/loaders_monai_fixed.py src/data/loaders_monai.py && source venv/bin/activate && python verify_monai_checklist.py"
		},
		{
			"label": "Test MONAI import",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -c \"from monai.data import load_decathlon_datalist; print('Import successful')\""
		},
		{
			"label": "Replace test file",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && mv tests/unit/test_transforms_presets_new.py tests/unit/test_transforms_presets.py"
		},
		{
			"label": "Run verification with venv",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py"
		},
		{
			"label": "Replace test file",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm tests/unit/test_transforms_presets.py && mv tests/unit/test_transforms_presets_final.py tests/unit/test_transforms_presets.py"
		},
		{
			"label": "Test transforms",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/unit/test_transforms_presets.py::test_brats_like_transforms_run -v"
		},
		{
			"label": "Test transforms again",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/unit/test_transforms_presets.py::test_brats_like_transforms_run -v"
		},
		{
			"label": "Test integration tests",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py -v"
		},
		{
			"label": "Test single integration test",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py::test_load_monai_decathlon_synthetic -v"
		},
		{
			"label": "Debug load_decathlon_datalist",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python debug_datalist.py"
		},
		{
			"label": "Test integration test fix",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py::test_load_monai_decathlon_synthetic -v"
		},
		{
			"label": "Replace test file",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && mv tests/integration/test_monai_msd_loader_fixed.py tests/integration/test_monai_msd_loader.py"
		},
		{
			"label": "Replace test file properly",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm tests/integration/test_monai_msd_loader.py && cp tests/integration/test_monai_msd_loader_fixed.py tests/integration/test_monai_msd_loader.py"
		},
		{
			"label": "Check function alias",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -c \"from src.data.loaders_monai import load_monai_decathlon; print(type(load_monai_decathlon)); print(load_monai_decathlon.__name__)\""
		},
		{
			"label": "Test dict access",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -c \"result = {\\\"dataloader\\\": \\\"fake\\\"}; print(result[\\\"dataloader\\\"])\""
		},
		{
			"label": "Run corrected integration test",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py::test_load_monai_decathlon_synthetic -v"
		},
		{
			"label": "Check files",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && ls -la tests/integration/test_monai_msd_loader*"
		},
		{
			"label": "Test fixed parameter separation",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py::test_load_monai_decathlon_synthetic -v"
		},
		{
			"label": "Check function alias resolution in fresh shell",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python3 -c \"import sys; sys.path.insert(0, '.'); from src.data.loaders_monai import load_monai_decathlon; print(f'Function: {load_monai_decathlon.__name__}'); print(f'Module: {load_monai_decathlon.__module__}'); import inspect; print(f'File: {inspect.getfile(load_monai_decathlon)}')\""
		},
		{
			"label": "Run all integration tests",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/integration/test_monai_msd_loader.py -v"
		},
		{
			"label": "Clean Python cache files",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && find . -name \"__pycache__\" -type d -exec rm -rf {} + 2>/dev/null || true && find . -name \"*.pyc\" -delete 2>/dev/null || true"
		},
		{
			"label": "Run complete verification with corrected alias",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py"
		},
		{
			"label": "Final verification with all tests passing",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py"
		},
		{
			"label": "Test transform presets are still working",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/unit/test_transforms_presets.py -v"
		},
		{
			"label": "Run unit tests for transform presets",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python -m pytest tests/unit/test_transforms_presets.py -v"
		},
		{
			"label": "Run full MONAI verification checklist",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py"
		},
		{
			"label": "Run MONAI verification checklist (isolated pytest)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python verify_monai_checklist.py",
			"isBackground": false,
			"problemMatcher": [
				"$pytest"
			],
			"group": "build"
		},
		{
			"label": "Test relocated verification script",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python scripts/validation/verify_monai_checklist.py"
		},
		{
			"label": "Test Training with Overlays",
			"type": "shell",
			"command": "python src/training/train_enhanced.py --config config/recipes/test_overlay.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 3 --save-prob-maps --val-max-batches 2",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Test Training with Overlays (Activated)",
			"type": "shell",
			"command": "source venv/bin/activate && python src/training/train_enhanced.py --config config/recipes/test_overlay.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 3 --save-prob-maps --val-max-batches 2",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Test Training with Overlays (Fixed)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/test_overlay.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 3 --save-prob-maps --val-max-batches 2",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Test Training with Overlays Final",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/test_overlay.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 3 --save-prob-maps --val-max-batches 2",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Test Overlay Quality",
			"type": "shell",
			"command": "python test_overlay_quality.py"
		},
		{
			"label": "Test Overlay Quality with venv",
			"type": "shell",
			"command": "source venv/bin/activate && python test_overlay_quality.py"
		},
		{
			"label": "Test Overlay Quality Fixed",
			"type": "shell",
			"command": "source venv/bin/activate && python test_overlay_quality.py"
		},
		{
			"label": "Test Overlay Quality Final",
			"type": "shell",
			"command": "source venv/bin/activate && python test_overlay_quality.py"
		},
		{
			"label": "Clean up test file",
			"type": "shell",
			"command": "rm -f test_overlay_quality.py"
		},
		{
			"label": "Clean up test outputs",
			"type": "shell",
			"command": "rm -rf test_outputs/"
		},
		{
			"label": "Replace visualization file",
			"type": "shell",
			"command": "mv src/training/callbacks/visualization_new.py src/training/callbacks/visualization.py"
		},
		{
			"label": "Backup old inference",
			"type": "shell",
			"command": "cp src/inference/inference.py src/inference/inference_backup.py"
		},
		{
			"label": "Test Enhanced Inference",
			"type": "shell",
			"command": "source venv/bin/activate && python test_enhanced_inference.py"
		},
		{
			"label": "Test Enhanced Inference Fixed",
			"type": "shell",
			"command": "source venv/bin/activate && python test_enhanced_inference.py"
		},
		{
			"label": "Clean up test files",
			"type": "shell",
			"command": "rm -f test_enhanced_inference.py"
		},
		{
			"label": "Test Complete Visualization System",
			"type": "shell",
			"command": "source venv/bin/activate && python test_viz_system.py"
		},
		{
			"label": "Clean up final test files",
			"type": "shell",
			"command": "rm -f test_viz_system.py && rm -rf test_viz/"
		},
		{
			"label": "Move Root Files",
			"type": "shell",
			"command": "python3 scripts/organization/move_root_files.py",
			"group": "build"
		},
		{
			"label": "Force Cleanup Root",
			"type": "shell",
			"command": "python3 scripts/organization/force_cleanup_root.py",
			"group": "build"
		},
		{
			"label": "Merge Log Directories",
			"type": "shell",
			"command": "if [ -d 'log' ] && [ -d 'logs' ]; then echo 'Merging log directories...'; mkdir -p logs; if [ \"$(ls -A log 2>/dev/null)\" ]; then cp -r log/* logs/ 2>/dev/null || true; fi; rmdir log 2>/dev/null || rm -rf log; echo 'Log merge complete'; else echo 'No duplicate log directories found'; fi",
			"group": "build"
		},
		{
			"label": "Final Summary",
			"type": "shell",
			"command": "python3 scripts/organization/final_summary.py",
			"group": "build"
		},
		{
			"label": "Auto Update Tasks",
			"type": "shell",
			"command": "python3 scripts/tools/auto_update_tasks.py",
			"group": "build"
		},
		{
			"label": "Remove Duplicates",
			"type": "shell",
			"command": "python3 scripts/organization/remove_duplicates.py",
			"group": "build"
		},
		{
			"label": "Verify Cleanup",
			"type": "shell",
			"command": "python3 scripts/organization/verify_cleanup.py",
			"group": "build"
		},
		{
			"label": "Clean Nested Duplicates",
			"type": "shell",
			"command": "python3 scripts/organization/clean_nested.py",
			"group": "build"
		},
		{
			"label": "Final Verification",
			"type": "shell",
			"command": "python3 scripts/organization/verify_cleanup.py",
			"group": "build"
		},
		{
			"label": "Run Complete Smoke Test",
			"type": "shell",
			"command": "chmod +x scripts/tools/complete_smoke_test.py && python3 scripts/tools/complete_smoke_test.py",
			"isBackground": false,
			"group": "test"
		},
		{
			"label": "Make smoke train launcher executable",
			"type": "shell",
			"command": "chmod +x scripts/tools/smoke_train_launcher.sh",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Run Complete Smoke Test (fixed permissions)",
			"type": "shell",
			"command": "python3 scripts/tools/complete_smoke_test.py",
			"isBackground": false,
			"group": "test"
		},
		{
			"label": "Run Simplified Smoke Test",
			"type": "shell",
			"command": "chmod +x scripts/tools/simple_smoke_test.py && python3 scripts/tools/simple_smoke_test.py",
			"isBackground": false,
			"group": "test"
		},
		{
			"label": "Update smoke train task status",
			"type": "shell",
			"command": "python3 scripts/organization/task_manager.py set-status final_validation run_smoke_train --status completed",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Check task manager usage",
			"type": "shell",
			"command": "python3 scripts/organization/task_manager.py set-status --help",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Update smoke train task status (correct syntax)",
			"type": "shell",
			"command": "python3 scripts/organization/task_manager.py set-status final_validation completed --task-id run_smoke_train",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Mark all organization tasks as completed",
			"type": "shell",
			"command": "python3 scripts/organization/mark_completion.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Check final task status",
			"type": "shell",
			"command": "python3 scripts/organization/task_manager.py list",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Final task status check",
			"type": "shell",
			"command": "python3 scripts/organization/task_manager.py list",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Verify actual task status",
			"type": "shell",
			"command": "python3 scripts/organization/verify_task_status.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Check current task status",
			"type": "shell",
			"command": "python3 scripts/organization/verify_task_status.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Check current directory status",
			"type": "shell",
			"command": "ls -la",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Check Docker validation script",
			"type": "shell",
			"command": "echo 'Starting Copilot Tasks execution...' && echo '1. Environment & Container Verification' && ls -la scripts/validation/test_docker.sh",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Execute Copilot Tasks",
			"type": "shell",
			"command": "chmod +x scripts/tools/copilot_tasks_executor.py && python3 scripts/tools/copilot_tasks_executor.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Continue Copilot Tasks",
			"type": "shell",
			"command": "python3 scripts/tools/copilot_tasks_executor.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Install ML Dependencies",
			"type": "shell",
			"command": "echo 'Installing MONAI and MLflow...' && pip install monai mlflow torch torchvision",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Install ML Dependencies in venv",
			"type": "shell",
			"command": "source .venv/bin/activate && pip install monai mlflow torch torchvision && python3 -c 'import monai, mlflow; print(f\"MONAI: {monai.__version__}, MLflow: {mlflow.__version__}\")'",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Run Docker Validation Script",
			"type": "shell",
			"command": "chmod +x scripts/validation/test_docker.sh && scripts/validation/test_docker.sh"
		},
		{
			"label": "Check GPU/CUDA Availability",
			"type": "shell",
			"command": "source .venv/bin/activate && python -c \"import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'CUDA devices: {torch.cuda.device_count()}')\""
		},
		{
			"label": "Download Brain Dataset (Limited Sample)",
			"type": "shell",
			"command": "source .venv/bin/activate && python scripts/data/pull_monai_dataset.py --dataset-id Task01_BrainTumour --root data/msd --limit 2"
		},
		{
			"label": "Download Brain Dataset (Training Only)",
			"type": "shell",
			"command": "source .venv/bin/activate && python scripts/data/pull_monai_dataset.py --dataset-id Task01_BrainTumour --root data/msd --sections training"
		},
		{
			"label": "Check Downloaded Dataset",
			"type": "shell",
			"command": "source .venv/bin/activate && python -c \"import os; print(f'Dataset directory exists: {os.path.exists(\"data/msd/Task01_BrainTumour\")}')\"; if [ -d 'data/msd/Task01_BrainTumour' ]; then echo 'Dataset contents:'; ls -la data/msd/Task01_BrainTumour/; fi"
		},
		{
			"label": "Quick Training Smoke Test",
			"type": "shell",
			"command": "source .venv/bin/activate && python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 2 --val-max-batches 1",
			"isBackground": false
		},
		{
			"label": "Quick Training Smoke Test (Fixed)",
			"type": "shell",
			"command": "source .venv/bin/activate && cd /home/kevin/Projects/tumor-detection-segmentation && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 2 --val-max-batches 1",
			"isBackground": false
		},
		{
			"label": "Install Medical Imaging Dependencies",
			"type": "shell",
			"command": "source .venv/bin/activate && pip install nibabel SimpleITK tqdm pydicom",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "1-Epoch Smoke Test Training",
			"type": "shell",
			"command": "source .venv/bin/activate && cd /home/kevin/Projects/tumor-detection-segmentation && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 2 --val-max-batches 1",
			"isBackground": false,
			"group": "training"
		},
		{
			"label": "Monitor Training Status",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python scripts/training/training_monitor.py",
			"isBackground": false
		},
		{
			"label": "Wait for Smoke Test Completion",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python scripts/training/training_monitor.py --wait --timeout 15",
			"isBackground": false
		},
		{
			"label": "Install Medical Imaging Dependencies",
			"type": "shell",
			"command": "source .venv/bin/activate && pip install nibabel SimpleITK pydicom tqdm"
		},
		{
			"label": "Check Current Training Status",
			"type": "shell",
			"command": "source .venv/bin/activate && python scripts/training/training_monitor.py"
		},
		{
			"label": "1-Epoch Smoke Test Validation",
			"type": "shell",
			"command": "source .venv/bin/activate && cd /home/kevin/Projects/tumor-detection-segmentation && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 2 --val-max-batches 1"
		},
		{
			"label": "Launch Expanded Training Sessions",
			"type": "shell",
			"command": "source .venv/bin/activate && cd /home/kevin/Projects/tumor-detection-segmentation && python scripts/training/expanded_training_launcher.py",
			"isBackground": false
		},
		{
			"label": "Run 5-Epoch Baseline Training",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && python scripts/training/expanded_training_launcher.py --session 5-epoch-baseline",
			"isBackground": false
		},
		{
			"label": "Test 5-Epoch Baseline (Dry Run)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && python scripts/training/expanded_training_launcher.py --session 5-epoch-baseline --dry-run",
			"isBackground": false
		},
		{
			"label": "5-Epoch Baseline Training",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation /home/kevin/Projects/tumor-detection-segmentation/.venv/bin/python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 5 --save-overlays --overlays-max 5 --save-prob-maps --val-max-batches 3",
			"isBackground": true
		},
		{
			"label": "Check Training Process",
			"type": "shell",
			"command": "ps aux | grep train_enhanced | grep -v grep",
			"isBackground": false
		},
		{
			"label": "10-Epoch Extended Training",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation /home/kevin/Projects/tumor-detection-segmentation/.venv/bin/python src/training/train_enhanced.py --config config/recipes/unetr_multimodal.json --dataset-config config/datasets/msd_task01_brain.json --epochs 10 --save-overlays --overlays-max 8 --save-prob-maps --val-max-batches 5",
			"isBackground": true
		},
		{
			"label": "Test Training Launcher",
			"type": "shell",
			"command": "source .venv/bin/activate && python test_training_launcher.py"
		},
		{
			"label": "1-Epoch Smoke Test",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python src/training/train_enhanced.py --config config/recipes/test_overlay.json --dataset-config config/datasets/msd_task01_brain.json --epochs 1 --save-overlays --overlays-max 2 --save-prob-maps --val-max-batches 2",
			"isBackground": true
		},
		{
			"label": "Clean up test files",
			"type": "shell",
			"command": "rm -f test_training_launcher.py monitor_and_launch.py"
		},
		{
			"label": "5-Epoch Baseline Training",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && PYTHONPATH=/home/kevin/Projects/tumor-detection-segmentation python scripts/training/expanded_training_launcher.py --session 5-epoch-baseline",
			"isBackground": true
		},
		{
			"label": "5-Epoch Baseline Training",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python scripts/training/expanded_training_launcher.py --session 5-epoch-baseline",
			"isBackground": true
		},
		{
			"label": "Full Expanded Training Sequence",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python launch_expanded_training.py",
			"isBackground": true
		},
		{
			"label": "Check Running Training Processes",
			"type": "shell",
			"command": "echo '🔍 Checking for active training processes...' && ps aux | grep -E '(train_enhanced|python.*train)' | grep -v grep || echo 'No training processes found' && echo '' && echo '📁 Checking for recent log files...' && find logs/ -name '*.log' -mmin -60 2>/dev/null | head -10 || echo 'No recent log files found' && echo '' && echo '📊 Checking MLflow runs...' && ls -la mlruns/ 2>/dev/null | tail -5 || echo 'No MLflow runs directory found'"
		},
		{
			"label": "Check Recent Training Activity",
			"type": "shell",
			"command": "echo '🔍 Checking recent activity and status...' && echo '' && echo '📊 Recent files in project:' && find . -type f -mmin -120 -name '*.py' -o -name '*.log' -o -name '*.json' | grep -E '(train|log|mlruns)' | head -10 && echo '' && echo '📁 Contents of logs directory:' && ls -la logs/ 2>/dev/null || echo 'No logs directory' && echo '' && echo '📈 Checking for any recent training outputs:' && find . -name 'mlruns' -type d 2>/dev/null && find . -name '*.pth' -o -name 'checkpoints' -type d 2>/dev/null | head -5"
		},
		{
			"label": "Test Training Launcher",
			"type": "shell",
			"command": "source .venv/bin/activate && echo '🚀 Testing training launcher configuration...' && python test_training_launcher.py"
		},
		{
			"label": "Launch Expanded Training Sequence",
			"type": "shell",
			"command": "source .venv/bin/activate && echo '🚀 Launching Expanded Training Sequence...' && echo 'Current time:' $(date) && python launch_expanded_training.py",
			"isBackground": true
		},
		{
			"label": "Monitor Active Training",
			"type": "shell",
			"command": "echo '🔍 Monitoring training process...' && echo 'Checking for active training processes:' && ps aux | grep -E '(train_enhanced|python.*train)' | grep -v grep && echo '' && echo 'Recent files (last 5 minutes):' && find . -type f -mmin -5 | grep -E '(log|mlruns|checkpoints)' | head -10 && echo '' && echo 'Checking system resources:' && echo 'Memory usage:' && free -h | head -2 && echo 'CPU load:' && uptime"
		},
		{
			"label": "Check Training Outputs",
			"type": "shell",
			"command": "echo '📈 Checking for training outputs and logs...' && echo '' && echo 'MLflow runs directory:' && ls -la mlruns/ 2>/dev/null || echo 'No mlruns directory yet' && echo '' && echo 'Models/checkpoints directory:' && ls -la models/checkpoints/ 2>/dev/null || echo 'No checkpoints yet' && echo '' && echo 'Any new log files:' && find . -name '*.log' -mmin -10 2>/dev/null | head -5 || echo 'No new log files' && echo '' && echo 'Checking for any .out files:' && find . -name '*.out' -mmin -10 2>/dev/null | head -5 || echo 'No .out files'"
		},
		{
			"label": "Check Training Progress",
			"type": "shell",
			"command": "sleep 30 && echo '🔄 Checking training progress after 30 seconds...' && echo 'Training processes:' && ps aux | grep train_enhanced | grep -v grep && echo '' && echo 'Checking for any new directories/files:' && find . -maxdepth 2 -type d -mmin -5 2>/dev/null | grep -E '(mlruns|logs|outputs)' && find . -maxdepth 3 -name '*.log' -o -name '*.out' -mmin -5 2>/dev/null | head -5"
		},
		{
			"label": "Monitor Training Progress",
			"type": "shell",
			"command": "echo '📋 Training Status Update:' && date && echo '' && echo 'Active processes:' && ps aux | grep train_enhanced | grep -v grep && echo '' && echo 'Checking for any new outputs:' && find . -type d -name 'mlruns' -o -name 'cache' -o -name 'logs' | head -5 && echo '' && echo 'Memory usage update:' && free -h | grep Mem && echo '' && echo 'Waiting for more progress...'"
		},
		{
			"label": "Detailed Training Monitor",
			"type": "shell",
			"command": "echo '📋 Detailed Training Monitoring...' && echo 'Time: '$(date) && echo '' && echo 'Process details:' && ps aux | grep train_enhanced | grep -v grep | head -2 && echo '' && echo 'Checking for MONAI cache:' && find . -path '*cache*' -type d 2>/dev/null | head -5 && echo '' && echo 'Data directory status:' && ls -la data/msd/ | head -5 && echo '' && echo 'Checking for any outputs in models:' && find models/ -type f -mmin -10 2>/dev/null | head -3"
		},
		{
			"label": "Run Training Progress Monitor",
			"type": "shell",
			"command": "source .venv/bin/activate && python monitor_training_progress.py"
		},
		{
			"label": "Run Training Status Summary",
			"type": "shell",
			"command": "source .venv/bin/activate && python training_status_summary.py"
		}
	]
}