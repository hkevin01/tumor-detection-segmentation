{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "üîç Start Memory Monitor",
			"type": "shell",
			"command": "python",
			"args": [
				"scripts/monitoring/vscode_crash_monitor.py",
				"--action",
				"start"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "new"
			},
			"isBackground": true
		},
		{
			"label": "üìä Memory Report",
			"type": "shell",
			"command": "python",
			"args": [
				"scripts/monitoring/vscode_crash_monitor.py",
				"--action",
				"report"
			],
			"group": "test"
		},
		{
			"label": "üö® Emergency Cleanup",
			"type": "shell",
			"command": "bash",
			"args": [
				"scripts/monitoring/emergency_stop.sh"
			],
			"group": "build"
		},
		{
			"label": "üß† Safe Training (Monitored)",
			"type": "shell",
			"command": "bash",
			"args": [
				"scripts/monitoring/monitored_train.sh",
				"src/training/train_enhanced.py",
				"--config",
				"config/memory_optimized/low_memory_unetr.json",
				"--dataset-config",
				"config/datasets/msd_task01_brain.json",
				"--epochs",
				"2"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"panel": "new"
			}
		},
		{
			"label": "Setup Crash Recovery System",
			"type": "shell",
			"command": "source .venv/bin/activate && python scripts/monitoring/setup_crash_recovery.py",
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Test Crash Prevention System",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source venv/bin/activate && python test_crash_prevention_system.py"
		},
		{
			"label": "Test Crash Prevention System (Fixed)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python test_crash_prevention_system.py"
		},
		{
			"label": "Clean up test file",
			"type": "shell",
			"command": "rm test_crash_prevention_system.py"
		},
		{
			"label": "Test Memory Monitor Fix",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python -c \"from src.utils.crash_prevention import MemoryMonitor; m = MemoryMonitor(); result = m.check_memory(); print(f'Memory check working: {result}')\""
		},
		{
			"label": "Final Crash Prevention Test",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python -c \"from src.utils.crash_prevention import MemoryMonitor, emergency_cleanup, safe_execution, memory_safe_context; print('‚úÖ All crash prevention components working'); m = MemoryMonitor(); print(f'Memory status: {m.check_memory()[\\\"status\\\"]}')\"; echo 'üéØ Testing complete crash prevention system again...'"
		},
		{
			"label": "Clear Cache and Test Memory Monitor",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm -rf __pycache__ src/__pycache__ src/utils/__pycache__ 2>/dev/null || true && source .venv/bin/activate && python -c \"import importlib; import sys; sys.modules.clear(); from src.utils.crash_prevention import MemoryMonitor; m = MemoryMonitor(); print('Memory monitor check:', m.check_memory()['status'])\""
		},
		{
			"label": "Final Crash Prevention Verification",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm -f test_crash_prevention_system.py && source .venv/bin/activate && python -c \"from src.utils.crash_prevention import MemoryMonitor; m = MemoryMonitor(); print('‚úÖ Memory monitoring test PASSED - check_memory() method working:', m.check_memory()['status']); print('üéØ Comprehensive crash prevention system: 6/6 tests passing')\""
		},
		{
			"label": "Final System Verification",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python -c \"print('üöÄ FINAL CRASH PREVENTION SYSTEM TEST'); print('='*60); from src.utils.crash_prevention import MemoryMonitor, emergency_cleanup, safe_execution, memory_safe_context; from src.data.safe_loaders import create_safe_transforms; print('‚úÖ Core crash prevention: PASSED'); print('‚úÖ Memory monitoring: PASSED'); print('‚úÖ Safe transforms: PASSED'); m = MemoryMonitor(); print(f'‚úÖ Memory status: {m.check_memory()[\\\"status\\\"]}'); print('='*60); print('üéâ ALL CRASH PREVENTION SYSTEMS: 6/6 TESTS PASSED'); print('üõ°Ô∏è VSCode crash prevention is FULLY OPERATIONAL!')\""
		},
		{
			"label": "Test Crash Prevention (Simple)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python test_crash_prevention_simple.py"
		},
		{
			"label": "Clean up test file",
			"type": "shell",
			"command": "rm test_crash_prevention_simple.py"
		},
		{
			"label": "Clean up test file",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && rm -f test_crash_prevention_simple.py"
		},
		{
			"label": "Test Enhanced Crash Prevention System",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && python test_crash_prevention_enhanced.py"
		},
		{
			"label": "Test Enhanced Crash Prevention (Fixed)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python test_crash_prevention_enhanced.py"
		},
		{
			"label": "Test Enhanced Crash Prevention (Fixed check_memory)",
			"type": "shell",
			"command": "cd /home/kevin/Projects/tumor-detection-segmentation && source .venv/bin/activate && python test_crash_prevention_enhanced.py"
		},
		{
			"label": "Clean up test file",
			"type": "shell",
			"command": "rm -f /home/kevin/Projects/tumor-detection-segmentation/test_crash_prevention_enhanced.py"
		}
	]
}