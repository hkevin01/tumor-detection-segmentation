name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov ruff mypy black

      - name: Lint with flake8
        run: |
          # Install flake8 if not in requirements
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Ruff lint (non-blocking)
        run: |
          ruff version
          ruff check . || true

      - name: Black check (non-blocking)
        run: |
          black --version
          black . --check --diff || true

      - name: Mypy type check (non-blocking)
        run: |
          mypy --version
          mypy src || true

      - name: Test with pytest
        run: |
          mkdir -p tests/artifacts
          OVERLAY_ARTIFACT_DIR=$PWD/tests/artifacts pytest tests/ --cov=src --cov-report=xml

      - name: Run MONAI CPU tests
        run: |
          pytest -m cpu tests/unit/test_transforms_presets.py tests/integration/test_monai_msd_loader.py -v

      - name: Upload overlay artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: overlay-smoke
          path: tests/artifacts/overlay_smoke.png

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit checks
        run: pre-commit run --all-files --show-diff-on-failure

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: gui/frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd gui/frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd gui/frontend
          npm test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd gui/frontend
          npm run build

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run security scan with Bandit
        run: |
          pip install bandit
          bandit -r src/ gui/backend/ -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: bandit-report.json

      - name: Generate SBOM (Syft) for repo
        uses: anchore/sbom-action@v0
        with:
          path: .
          artifact-name: repo-sbom.spdx.json
          format: spdx-json
          upload-release-assets: false
          dependency-snapshot: false

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-sbom
          path: repo-sbom.spdx.json

      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-fs.sarif"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy FS SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-fs.sarif"

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (test)
        run: |
          docker build -t tumor-detection:test .

      - name: Trivy image scan (fail on HIGH,CRITICAL)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "tumor-detection:test"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Trivy image scan (SARIF)
        if: always()
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "tumor-detection:test"
          format: "sarif"
          output: "trivy-image.sarif"

      - name: Upload Trivy Image SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image.sarif"

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install documentation dependencies
        run: |
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run smoke tests in Docker
        run: |
          docker build -f docker/images/Dockerfile.test-lite -t tumor-test-lite .
          docker run --rm tumor-test-lite
